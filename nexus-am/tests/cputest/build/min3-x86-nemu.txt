
/home/user/ics2017/ics2017/nexus-am/tests/cputest/build/min3-x86-nemu：     文件格式 elf32-i386


Disassembly of section .text:

00100000 <_start>:
  100000:	bd 00 00 00 00       	mov    $0x0,%ebp
  100005:	bc 00 7c 00 00       	mov    $0x7c00,%esp
  10000a:	e8 0d 00 00 00       	call   10001c <_trm_init>
  10000f:	90                   	nop

00100010 <_halt>:
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	8b 45 08             	mov    0x8(%ebp),%eax
  100016:	d6                   	(bad)  
  100017:	eb fe                	jmp    100017 <_halt+0x7>
  100019:	66 90                	xchg   %ax,%ax
  10001b:	90                   	nop

0010001c <_trm_init>:
  10001c:	55                   	push   %ebp
  10001d:	89 e5                	mov    %esp,%ebp
  10001f:	56                   	push   %esi
  100020:	53                   	push   %ebx
  100021:	31 f6                	xor    %esi,%esi
  100023:	bb f9 03 00 00       	mov    $0x3f9,%ebx
  100028:	89 f0                	mov    %esi,%eax
  10002a:	89 da                	mov    %ebx,%edx
  10002c:	ee                   	out    %al,(%dx)
  10002d:	b9 fb 03 00 00       	mov    $0x3fb,%ecx
  100032:	b0 80                	mov    $0x80,%al
  100034:	89 ca                	mov    %ecx,%edx
  100036:	ee                   	out    %al,(%dx)
  100037:	b2 f8                	mov    $0xf8,%dl
  100039:	b0 01                	mov    $0x1,%al
  10003b:	ee                   	out    %al,(%dx)
  10003c:	89 f0                	mov    %esi,%eax
  10003e:	89 da                	mov    %ebx,%edx
  100040:	ee                   	out    %al,(%dx)
  100041:	b0 03                	mov    $0x3,%al
  100043:	89 ca                	mov    %ecx,%edx
  100045:	ee                   	out    %al,(%dx)
  100046:	b2 fa                	mov    $0xfa,%dl
  100048:	b0 c7                	mov    $0xc7,%al
  10004a:	ee                   	out    %al,(%dx)
  10004b:	b2 fc                	mov    $0xfc,%dl
  10004d:	b0 0b                	mov    $0xb,%al
  10004f:	ee                   	out    %al,(%dx)
  100050:	e8 37 00 00 00       	call   10008c <main>
  100055:	d6                   	(bad)  
  100056:	eb fe                	jmp    100056 <_trm_init+0x3a>

00100058 <nemu_assert>:
  100058:	55                   	push   %ebp
  100059:	89 e5                	mov    %esp,%ebp
  10005b:	8b 45 08             	mov    0x8(%ebp),%eax
  10005e:	85 c0                	test   %eax,%eax
  100060:	74 02                	je     100064 <nemu_assert+0xc>
  100062:	5d                   	pop    %ebp
  100063:	c3                   	ret    
  100064:	c7 45 08 01 00 00 00 	movl   $0x1,0x8(%ebp)
  10006b:	5d                   	pop    %ebp
  10006c:	e9 9f ff ff ff       	jmp    100010 <_halt>
  100071:	8d 76 00             	lea    0x0(%esi),%esi

00100074 <min3>:
  100074:	55                   	push   %ebp
  100075:	89 e5                	mov    %esp,%ebp
  100077:	8b 45 0c             	mov    0xc(%ebp),%eax
  10007a:	3b 45 10             	cmp    0x10(%ebp),%eax
  10007d:	7e 03                	jle    100082 <min3+0xe>
  10007f:	8b 45 10             	mov    0x10(%ebp),%eax
  100082:	3b 45 08             	cmp    0x8(%ebp),%eax
  100085:	7e 03                	jle    10008a <min3+0x16>
  100087:	8b 45 08             	mov    0x8(%ebp),%eax
  10008a:	5d                   	pop    %ebp
  10008b:	c3                   	ret    

0010008c <main>:
  10008c:	55                   	push   %ebp
  10008d:	89 e5                	mov    %esp,%ebp
  10008f:	57                   	push   %edi
  100090:	56                   	push   %esi
  100091:	53                   	push   %ebx
  100092:	83 e4 f0             	and    $0xfffffff0,%esp
  100095:	83 ec 10             	sub    $0x10,%esp
  100098:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10009f:	00 
  1000a0:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1000a4:	c1 e0 04             	shl    $0x4,%eax
  1000a7:	89 44 24 08          	mov    %eax,0x8(%esp)
  1000ab:	31 f6                	xor    %esi,%esi
  1000ad:	8b 44 24 08          	mov    0x8(%esp),%eax
  1000b1:	8d 3c 30             	lea    (%eax,%esi,1),%edi
  1000b4:	31 db                	xor    %ebx,%ebx
  1000b6:	8b 14 9d 40 02 10 00 	mov    0x100240(,%ebx,4),%edx
  1000bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1000c1:	8b 0c 85 40 02 10 00 	mov    0x100240(,%eax,4),%ecx
  1000c8:	8b 86 40 02 10 00    	mov    0x100240(%esi),%eax
  1000ce:	39 c8                	cmp    %ecx,%eax
  1000d0:	7e 02                	jle    1000d4 <main+0x48>
  1000d2:	89 c8                	mov    %ecx,%eax
  1000d4:	8d 0c 1f             	lea    (%edi,%ebx,1),%ecx
  1000d7:	39 d0                	cmp    %edx,%eax
  1000d9:	7e 02                	jle    1000dd <main+0x51>
  1000db:	89 d0                	mov    %edx,%eax
  1000dd:	39 04 8d 40 01 10 00 	cmp    %eax,0x100140(,%ecx,4)
  1000e4:	0f 94 c0             	sete   %al
  1000e7:	0f b6 c0             	movzbl %al,%eax
  1000ea:	89 04 24             	mov    %eax,(%esp)
  1000ed:	e8 66 ff ff ff       	call   100058 <nemu_assert>
  1000f2:	43                   	inc    %ebx
  1000f3:	83 fb 04             	cmp    $0x4,%ebx
  1000f6:	75 be                	jne    1000b6 <main+0x2a>
  1000f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1000ff:	e8 54 ff ff ff       	call   100058 <nemu_assert>
  100104:	83 c6 04             	add    $0x4,%esi
  100107:	83 fe 10             	cmp    $0x10,%esi
  10010a:	75 a1                	jne    1000ad <main+0x21>
  10010c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100113:	e8 40 ff ff ff       	call   100058 <nemu_assert>
  100118:	ff 44 24 0c          	incl   0xc(%esp)
  10011c:	83 7c 24 0c 04       	cmpl   $0x4,0xc(%esp)
  100121:	0f 85 79 ff ff ff    	jne    1000a0 <main+0x14>
  100127:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10012e:	e8 25 ff ff ff       	call   100058 <nemu_assert>
  100133:	31 c0                	xor    %eax,%eax
  100135:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100138:	5b                   	pop    %ebx
  100139:	5e                   	pop    %esi
  10013a:	5f                   	pop    %edi
  10013b:	5d                   	pop    %ebp
  10013c:	c3                   	ret    
